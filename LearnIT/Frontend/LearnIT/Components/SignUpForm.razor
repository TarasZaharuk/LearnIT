@using MudBlazor;
@using Components;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using DTOs;
@using Shared;
<MudGrid>
    <MudItem xs="12" sm="22">
        <MudForm Style="margin-left:10px; margin-right:10px" @bind-IsValid="@success">
            <MudText Align="Align.Center" Typo="Typo.h6" Style="font-weight:bold">Sign up</MudText>
            <MudTextField T="string" @bind-Value="_firstName" Label="First Name" Required="true" RequiredError="First name is required!" />
            <MudTextField T="string" @bind-Value="_lastName" Label="Last Name" Required="true" RequiredError="Last name is required!" />
            <MudTextField T="string" @bind-Value="_email" Label="Email" Required="true" RequiredError="Email is required!"
                          Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
            <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="passwordField"
                          InputType="InputType.Password"
                          TextChanged="ValidatePassword" Required="true"
                          RequiredError="Password is required!"
                          ErrorText="@_passwordValidationError" />
            <MudTextField T="string"
                          Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                          Validation="@(new Func<string, string>(GetPasswordMatchError))" />
            <MudDatePicker @bind-Date="_birthDate" MaxDate="DateTime.Now.AddYears(-_minUserAge)" PickerVariant="PickerVariant.Dialog" Required="true" RequiredError="Birth date is required!" Label="MM/dd/yyyy" Editable="true" Mask="@(new DateMask("MM/dd/yyyy"))" DateFormat="MM/dd/yyyy" Placeholder="Set your birth date" />


            <div class="d-flex">
                <MudRadioGroup @bind-Value="_selectedGender" T="Gender" Required="true" RequiredError="Gender is required!">
                    @foreach (Gender gender in Genders)
                    {
                        <MudRadio Value="gender">@gender.Name</MudRadio>
                    }
                </MudRadioGroup>
            </div>
            <div class="d-flex align-center justify-space-between">
                <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree with agreement" />
                <MudSpacer />
                <MudButton Variant="Variant.Filled" OnClick="OnRegistrationClick" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
            </div>
        </MudForm>
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public IList<Gender> Genders { get; set; } = null!;
    [Parameter]
    public EventCallback<AddUserModel> OnUserRegistrationCompleted { get; set; }

    private Gender _selectedGender = null!;
    private string _firstName = null!;
    private string _lastName = null!;
    private string _email = null!;
    private int _minUserAge = 17;
    private DateTime? _birthDate;

    private bool success;
    private string? _passwordValidationError = null!;
    MudTextField<string> passwordField = null!;

    public SignUpForm()
    {
        _birthDate = DateTime.Now.AddYears(-_minUserAge);
    }

    private bool IsPasswordValid(string password)
    {
        return
            password.Length >= 8 &&
            Regex.IsMatch(password, @"[A-Z]") &&
            Regex.IsMatch(password, @"[a-z]") &&
            Regex.IsMatch(password, @"[0-9]");
    }

    private void ValidatePassword(string password)
    {
        if (IsPasswordValid(password))
            return;
        if (string.IsNullOrWhiteSpace(password))
            passwordField.ValidationErrors.Add("Password is required!");
        if (password.Length < 8)
            passwordField.ValidationErrors.Add("Password must be at least of length 8");
        if (!Regex.IsMatch(password, @"[A-Z]"))
            passwordField.ValidationErrors.Add("Password must contain at least one capital letter");
        if (!Regex.IsMatch(password, @"[a-z]"))
            passwordField.ValidationErrors.Add("Password must contain at least one lowercase letter");
        if (!Regex.IsMatch(password, @"[0-9]"))
            passwordField.ValidationErrors.Add("Password must contain at least one digit");
        _passwordValidationError = passwordField.ValidationErrors.FirstOrDefault();
    }

    private string GetPasswordMatchError(string password)
    {
        if (passwordField.Value != password)
            return "Passwords don't match";
        return null!;
    }

    private async Task OnRegistrationClick()
    {
        AddUserModel user = GetUserRegistrationModel();
        await OnUserRegistrationCompleted.InvokeAsync(user);
    }

    private AddUserModel GetUserRegistrationModel()
    {
        AddUserModel? userRegistrationModel = new AddUserModel
            {
                FirstName = _firstName,
                LastName = _lastName,
                BirthDate = DateOnly.FromDateTime(_birthDate!.Value),
                GenderId = _selectedGender.Id,
                Email = _email,
                Password = passwordField.Value!
            };
        return userRegistrationModel;
    }
}
