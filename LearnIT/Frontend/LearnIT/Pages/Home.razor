@page "/"
@layout LandingLayout
@inject NavigationManager NavigationManeger
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject AuthenticatedHttpClient AuthenticatedHttpClient
@inject UserAuthenticationStateProvider UserAuthenticationStateProvider
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@using DTOs
@using LearnIT.Components
@using Shared;
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.WebUtilities
@using System.Security.Claims

@inherits ComponentBase
<MudPaper Class="landing-overlay" Elevation="0" Width="100%" MinHeight="100vh">
    <MudGrid Justify="Justify.FlexEnd">
        @if(_isUserAuthenticated)
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="OnLogOutClick">Log out</MudButton>
        }
        else
        {
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="OnLogInClick">Log In</MudButton>
        }
    </MudGrid>

    <MudGrid Justify="Justify.Center" Style="display:flex; vertical-align:middle; justify-content:center; align-items:center;">
        <MudItem xs="12" md="6">
            <MudText Typo="Typo.h1" Align="Align.Center" Color="Color.Primary" Class="main-heading">Find Your IT Tutor</MudText>
            <MudText Typo="Typo.h5" Align="Align.Center" Color="Color.Secondary" Class="subheading">
                Whether you're just starting or looking to specialize, our expert tutors are here to guide you. Join us
                to find the right mentor or become a tutor to share your expertise.
            </MudText>
            <br>
            <MudGrid Justify="Justify.Center" Spacing="3">
                <MudItem>
                    <MudButton Variant="Variant.Filled" OnClick="OnFindTutorClick" Color="Color.Primary" Class="action-button">Find Tutor</MudButton>
                </MudItem>
                @if (_isTutor)
                {
                    <MudItem>
                        <MudButton Variant="Variant.Outlined" Href="/tutor/registration" Color="Color.Secondary" Class="action-button">View Profile</MudButton>
                    </MudItem>
                }
                else if (_isUserAuthenticated & _isEmailConfirmed)
                {
                    <MudItem>
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Class="action-button">Promote to Tutor</MudButton>
                    </MudItem>
                }
                else
                {
                    <MudItem>
                        <MudButton Variant="Variant.Outlined" OnClick="OnBecomeTutorClick" Color="Color.Secondary" Class="action-button">Become a Tutor</MudButton>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>

        <MudItem xs="12" md="4">
            <MudCard>
                <MudCardMedia Image="BobMartin.png" />
                <MudCardContent>
                    <MudText Typo="Typo.h6" Align="Align.Center">Bob Martin</MudText>
                    <MudText Typo="Typo.body2" Align="Align.Center" Color="Color.Secondary">
                        I am a seasoned software craftsman with decades of experience in software development and agile methodologies. I specialize in Clean Code, Test-Driven Development (TDD), and refactoring.
                    </MudText>
                </MudCardContent>
                <MudCardActions Class="justify-center">
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary">View Profile</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudPaper>
@code{
    private bool _isUserAuthenticated;
    private bool _isTutor;
    private bool _isEmailConfirmed;

    private const string UserRegistrationPageAddress = "/user/registration";
    private const string TutorsPageAddress = "/tutors";


    protected override async Task OnInitializedAsync()
    {
        _isUserAuthenticated = await UserAuthenticationStateProvider.IsUserAuthenticated();
        _isEmailConfirmed = await IsEmailConfirmed();

        _isTutor = await UserAuthenticationStateProvider.IsUserInRole("Tutor");
    }

    private void OnFindTutorClick()
    {
        NavigationManeger.NavigateTo(TutorsPageAddress);
    }

    private void OnBecomeTutorClick()
    {
        NavigationManeger.NavigateTo(UserRegistrationPageAddress);
    }

    private async Task OnLogInClick()
    {
        if (_isUserAuthenticated) return;

        UserLoginModel? userLoginModel;
        IDialogReference dialog = await DialogService.ShowAsync<LogInDialog>();
        DialogResult? dialogResult = await dialog.Result;
        if (dialogResult == null) return;

        userLoginModel = (UserLoginModel)dialogResult.Data!;
        if (userLoginModel == null) return;

        await LogIn(userLoginModel);
    }

    private async Task OnLogOutClick()
    {
        await UserAuthenticationStateProvider.MarkUserAsLoggedOut();
        _isUserAuthenticated = false;
        StateHasChanged();
        Snackbar.Add("You are log out");
    }

    private async Task LogIn(UserLoginModel userLoginModel)
    {

        HttpResponseMessage response = await HttpClient.PostAsJsonAsync<UserLoginModel>("/login", userLoginModel);
        if (!response.IsSuccessStatusCode)
            return;

        string? token = await response.Content.ReadAsStringAsync();
        if (token != null)
            await UserAuthenticationStateProvider.MarkUserAsAuthenticated(token);

        bool isUserInTutorRole = await UserAuthenticationStateProvider.IsUserInRole("Tutor");
        if (isUserInTutorRole)
            NavigationManeger.NavigateTo($"/tutor/registration", true);
        else NavigationManeger.NavigateTo(TutorsPageAddress, true);
        _isUserAuthenticated = true;
    }

    private async Task<bool> IsEmailConfirmed()
    {
        int? userId = await UserAuthenticationStateProvider.GetAuthenticatedUserIdAsync();
        if (userId == null)
            return false;
        bool isEmailConfirmed = await HttpClient.GetFromJsonAsync<bool>($"/users/{userId}email/state");
        return isEmailConfirmed;
    }
}