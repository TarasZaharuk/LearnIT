@page "/user/registration"
@using LearnIT.Components
@using MudBlazor;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using DTOs;
@using Shared;
@using System.Text.Json;
@layout LandingLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@if (_genders != null)
{
    <MudContainer MaxWidth="MaxWidth.False">
        <MudGrid Justify="Justify.Center" Style="align-items:center;">
            <MudPaper Style="width:40%;align-items:end;vertical-align:middle;">
                <SignUpForm Genders="_genders" OnUserRegistrationCompleted="HandleUserRegistrationModel" />
            </MudPaper>
        </MudGrid>
    </MudContainer>
}

@code {
    private IList<Gender> _genders = null!;

    protected override async Task OnInitializedAsync()
    {
        await LoadGendersAsync();
    }

    private async Task LoadGendersAsync()
    {
        _genders = await HttpClient.GetFromJsonAsync<List<Gender>>("/genders") ?? throw new Exception("genders is null");
    }
    private async Task HandleUserRegistrationModel(AddUserModel addedUser)
    {
        HttpResponseMessage? response = await HttpClient.PostAsJsonAsync("/user", addedUser);
        if (response.IsSuccessStatusCode)
        {
            int userId = await response.Content.ReadFromJsonAsync<int>();
            int tutorId = await RegistrateTutor(userId);
            NavigationManager.NavigateTo($"/tutor/registration/{tutorId}");
        }
    }

    private async Task<int> RegistrateTutor(int userId)
    {
        AddTutorModel addedTutor = new AddTutorModel{UserId = userId};
        HttpResponseMessage? response = await HttpClient.PostAsJsonAsync<AddTutorModel>("/tutor", addedTutor);
        if (response.IsSuccessStatusCode)
            throw new Exception("Tutor is not added");

        int tutorId = await response.Content.ReadFromJsonAsync<int>();
        return tutorId;
    }
}
