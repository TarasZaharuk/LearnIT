@page "/user/registration"
@using LearnIT.Components
@using MudBlazor;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using DTOs;
@using Shared;
@using System.Text.Json;
@layout LandingLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticatedHttpClient AuthenticatedHttpClient
@inject UserAuthenticationStateProvider UserAuthenticationStateProvider

    <MudContainer MaxWidth="MaxWidth.False">
        <MudGrid Justify="Justify.Center" Style="align-items:center;">
            <MudPaper Style="width:40%;align-items:end;vertical-align:middle;">
                <SignUpForm Genders="_genders" OnUserRegistrationCompleted="HandleUserRegistrationModel" />
            </MudPaper>
        </MudGrid>
    </MudContainer>


@code {
    private IList<Gender> _genders = new List<Gender> { new Gender { Id = 1, Name = "Male" }, new Gender { Id = 2, Name = "Female" } };

    protected override async Task OnInitializedAsync()
    {
        await LoadGendersAsync();
    }

    private async Task LoadGendersAsync()
    {
        _genders = await HttpClient.GetFromJsonAsync<List<Gender>>("/genders") ?? throw new Exception("genders is null");
    }

    private async Task HandleUserRegistrationModel(AddUserModel addedUser)
    {
        HttpResponseMessage? response = await HttpClient.PostAsJsonAsync("/user", addedUser);
        if (!response.IsSuccessStatusCode)
            return;

        UserLoginModel userLoginModel = new UserLoginModel {Email = addedUser.Email, Password = addedUser.Password };
        await Login(userLoginModel);

        int? userId = await UserAuthenticationStateProvider.GetAuthenticatedUserIdAsync();
        if (!userId.HasValue)
            return;

        await RegistrateTutor(userId.Value);
        NavigationManager.NavigateTo($"/user/email-verification");
    }

    private async Task RegistrateTutor(int userId)
    {
        AddTutorModel addedTutor = new AddTutorModel{UserId = userId};
        HttpResponseMessage? response = await AuthenticatedHttpClient.PostAsync<AddTutorModel>("/tutor", addedTutor);
        if (!response.IsSuccessStatusCode)
            throw new Exception("Tutor is not added");
    }

    private async Task Login(UserLoginModel userLoginModel)
    {
        HttpResponseMessage response = await HttpClient.PostAsJsonAsync<UserLoginModel>("/login", userLoginModel);

        string? token = await response.Content.ReadAsStringAsync();
        if (token != null)
            await UserAuthenticationStateProvider.MarkUserAsAuthenticated(token);
    }
}
