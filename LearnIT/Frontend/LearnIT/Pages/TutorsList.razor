@page "/tutors"
@inject HttpClient httpClient
@using DTOs;
@using LearnIT.Components
@using Shared
@using System.Text
@inject IJSRuntime JS

@if(_tutors == null)
{
    <MudProgressLinear Style=""  Size="Size.Large" Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    <ListContainer>
        <FilterDrawerContent>
            <FilterDrawer DrawerVariant="@_drawerVariant" @bind-Open="_filterDrawerOpen">
                <WageSlider @ref="_wageSlider" MaxWage="MaxWage" MinWage="MinWage" LowerWageChanged="OnFromWageChanged" UpperWageChanged="OnToWageChanged"/>
                @if (_skills != null)
                {
                    <MudText Style="left:5%;">Skills</MudText>
                    <MudSelect OnClose="LoadFilteredTutors"
                               @onselectstart="LoadFilteredTutors"
                               Dense="true"
                               FullWidth="true"
                               Clearable="true"
                               Variant="Variant.Outlined"
                               T="Skill" MultiSelection="true"
                               @onselectionchange="LoadFilteredTutors"
                               @bind-SelectedValues="_selectedSkills">
                        @foreach (Skill skill in _skills)
                        {
                            <MudSelectItem T="Skill" Value="@skill">@skill.SkillName</MudSelectItem>
                        }
                    </MudSelect>
                }
            </FilterDrawer>
        </FilterDrawerContent>

        <TopStickyContent>
            <CustomToolBar Count="@_tutors.Count.ToString()" SearchedStringChange="OnSearchStringChanged">
                <TopRightButtonContent>
                    @if (_lowerWage != null || _upperWage != null || _selectedSkills != null)
                    {
                        <MudButton Size="Size.Small" OnClick="ClearFilters">Clear filters</MudButton>
                    }
                    <MudIconButton Icon="@Icons.Material.Filled.FilterAlt" OnClick="FilterDrawerToggle"/>
                </TopRightButtonContent>
                <ToolBarContent>
                    @if (_selectedSkills != null && _selectedSkills.Any())
                    {
                        <MudStack Row="true" Wrap="Wrap.Wrap" Spacing="0" Style="overflow-y:auto;background-color:white;">
                            @foreach (var skill in _selectedSkills)
                            {
                                <MudChip Size="Size.Small" Variant="Variant.Filled" Style="background-color:gainsboro;" T="Skill" Value="skill" Text="@skill.SkillName" Color="Color.Default" OnClose="CloseSkill"></MudChip>
                            }
                        </MudStack>
                    }
                </ToolBarContent>
            </CustomToolBar>
        </TopStickyContent>

        <MainContent>
            @foreach (var tutor in _tutors)
            {
                <div class="d-flex">
                    <TutorListItemCard Tutor="tutor"></TutorListItemCard>
                </div>
            }
        </MainContent>
    </ListContainer>
}

@code {
    private const double MinWage = 40;
    private const double MaxWage = 100;

    private IList<TutorDTO>? _tutors;
    private bool _filterDrawerOpen = false;
    private bool _clearFilters = false;
    private string _searchedTutors = null!;
    private double? _lowerWage = null!;
    private double? _upperWage = null!;
    public int BrowserWindowWidth { get; set; }
    public int BrowserWindowHeight { get; set; }
    private IList<Skill>? _skills;
    private IEnumerable<Skill> _selectedSkills { get; set; } = null!;
    private DrawerVariant _drawerVariant = DrawerVariant.Persistent;

    private WageSlider _wageSlider = null!;


    protected override async Task OnInitializedAsync()
    {
        await InitSkills();
        await LoadFilteredTutors();
    }

    private async Task InitSkills()
    {
        _skills = await httpClient.GetFromJsonAsync<List<Skill>>("/skills");
    }

    private async Task LoadFilteredTutors()
    {
        _tutors = await httpClient.GetFromJsonAsync<List<TutorDTO>>($"/tutors?{GetQueryParameters()}");
    }

    private void FilterDrawerToggle()
    {
        _filterDrawerOpen = !_filterDrawerOpen;
        StateHasChanged();
    }

    private async Task ClearFilters()
    {
        _lowerWage = null;
        _upperWage = null;
        _selectedSkills = null!;
        _wageSlider.SetValuesToDefult();
        StateHasChanged();
        await LoadFilteredTutors();
    }

    private async Task OnSearchStringChanged(string name)
    {
        _searchedTutors = name;
        await LoadFilteredTutors();
    }

    private async Task OnFromWageChanged(double fromWage)
    {
        _lowerWage = fromWage;
        await LoadFilteredTutors();
    }

    private async Task OnToWageChanged(double toWage)
    {
        _upperWage = toWage;
        await LoadFilteredTutors();
    }

    private async Task CloseSkill(MudChip<Skill> skill)
    {
        if (_selectedSkills == null || !_selectedSkills.Any())
            return;
        var updatedSkills = _selectedSkills.ToList();
        updatedSkills.Remove(skill.Value!);
        _selectedSkills = updatedSkills;
        await LoadFilteredTutors();
    }

    private string GetQueryParameters()
    {
        string skillsQuery = null!;
        StringBuilder quaryParametersBuilder = new StringBuilder();

        if (_selectedSkills != null && _selectedSkills.Any())
            skillsQuery = string.Join("&", _selectedSkills.ToList().Select(s => $"SelectedSkills={Uri.EscapeDataString(s.SkillName)}"));

        quaryParametersBuilder.Append($"LowerWage={_lowerWage}&");
        quaryParametersBuilder.Append($"UpperWage={_upperWage}&");
        quaryParametersBuilder.Append($"Name={_searchedTutors ?? " "}&");
        quaryParametersBuilder.Append($"{skillsQuery}");
        return quaryParametersBuilder.ToString();
    }

    [JSInvokable]
    public void OnResize(int width, int height)
    {
        if (BrowserWindowWidth == width && BrowserWindowHeight == height) return;
        BrowserWindowWidth = width;
        BrowserWindowHeight = height;
        if (BrowserWindowWidth < 1010)
            _drawerVariant = DrawerVariant.Temporary;
        else _drawerVariant = DrawerVariant.Persistent;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JS.InvokeVoidAsync("window.registerViewportChangeCallback", DotNetObjectReference.Create(this));
    }
}