@page "/user/registration"
@using LearnIT.Components
@using MudBlazor;
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using DTOs;
@using Shared.AddUserResponse;
@using Shared;
@using System.Text.Json;
@layout LandingLayout
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticatedHttpClient AuthenticatedHttpClient
@inject UserAuthenticationStateProvider UserAuthenticationStateProvider
@inject ISnackbar Snackbar

    <MudContainer MaxWidth="MaxWidth.False">
        <MudGrid Justify="Justify.Center" Style="align-items:center;">
            <MudPaper Style="width:40%;align-items:end;vertical-align:middle;">
                <SignUpForm EmailError=@_emailError Genders="_genders" OnUserRegistrationCompleted="HandleUserRegistrationModel" />
            </MudPaper>
        </MudGrid>
    </MudContainer>


@code {
    private IList<Gender> _genders = new List<Gender> { new Gender { Id = 1, Name = "Male" }, new Gender { Id = 2, Name = "Female" } };
    private string? _emailError;

    protected override async Task OnInitializedAsync()
    {
        await LoadGendersAsync();
    }

    private async Task LoadGendersAsync()
    {
        _genders = await HttpClient.GetFromJsonAsync<List<Gender>>("/genders") ?? throw new Exception("genders is null");
    }

    private async Task HandleUserRegistrationModel(AddUserModel addedUser)
    {
        HttpResponseMessage? response = await HttpClient.PostAsJsonAsync("/user", addedUser);
        AddUserResponse? addUserResponse = await response.Content.ReadFromJsonAsync<AddUserResponse>();

        if (response.IsSuccessStatusCode)
        {
            UserLoginModel userLoginModel = new UserLoginModel { Email = addedUser.Email, Password = addedUser.Password };
            await Login(userLoginModel);

            NavigationManager.NavigateTo($"/user/email-verification");
        }

        if (addUserResponse is null || addUserResponse.Issue is AddingUserIssue.UnhandledError)
        {
            Snackbar.Add("Some error occurred. Please try again later", Severity.Error);
            return;
        }

        if(addUserResponse.Issue is AddingUserIssue.DuplicateEmail)
        {
            Snackbar.Add("The email address is already occupied", Severity.Warning);
            _emailError = "The email address is already occupied";
        }

        if(addUserResponse.Issue is AddingUserIssue.EmailAddressDoesNotExist)
        {
            _emailError = "The email address does not exist";
            Snackbar.Add(_emailError, Severity.Warning);
        }
    }

    private async Task Login(UserLoginModel userLoginModel)
    {
        await UserAuthenticationStateProvider.Login(userLoginModel);
    }
}
